# optional openapi spec
openapi: 3.0.0
info:
  title: Yonote API
  description: |
    # Introduction

    The Yonote API follows an RPC style that lets you interact with Yonote and
    manage knowledge-base data just like the main application (which is built on
    the same API).

    The API structure is described with an OpenAPI specification available as
    [yml](https://yonote.ru/openapi-3.yml) or
    [json](https://yonote.ru/openapi-3.json).

    # Making requests

    Each endpoint maps to a method at `https://app.yonote.ru/api/method`.
    `GET` and `POST` are supported, but we recommend always using `POST`.
    Requests are served over HTTPS and return JSON data.

    For `POST` requests include a **Content-Type** header. To send JSON payloads
    use **Content-Type: application/json**. Example with CURL:

    ```
    curl https://app.yonote.ru/api/documents.info \
      -X POST \
      -H 'authorization: Bearer MY_API_KEY' \
      -H 'content-type: application/json' \
      -H 'accept: application/json' \
      -d '{"id": "yonote-api-DLSdsdssSD"}'
    ```

    Or with JavaScript:

    ```javascript
    const response = await fetch("https://app.yonote.ru/api/documents.info", {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: 'Bearer MY_API_KEY'
      }
    })

    const body = await response.json();
    const document = body.data;
    ```

    # Authentication

    Obtain an API key from the [settings page](https://app.yonote.ru/settings).

    **Warning: API keys grant full access to your documents. Treat them like passwords!**

    Send the key in the `Authorization` header (`Authorization: Bearer YOUR_API_KEY`)
    or as `token=YOUR_API_KEY` in the request parameters. Headers are preferred.

    Some endpoints allow unauthenticated access (for example to public resources)
    and can be queried without an API key.

    # Errors

    Successful requests return status code 200 or 201 with body `{ "ok": true }`.
    If an error occurs an appropriate HTTP status code is returned with a body
    similar to:

    ```
    {
      "ok": false,
      "error": "Not Found"
    }
    ```

    # Pagination

    Most API resources provide a `list` method (e.g. users, documents,
    collections) that accepts `limit` and `offset` parameters.

    Each response includes a `pagination` object containing the supplied
    parameters and a `nextPath` field for fetching the next page. Example:

    ```
    {
      ok: true,
      status: 200,
      data: […],
      pagination: {
        limit: 25,
        offset: 0,
        nextPath: "/api/documents.list?limit=25&offset=25"
      }
    }
    ```

    # Policies

    Many resources are associated with "policies" describing what an API key can
    access. A policy's `id` matches the resource it references and policies do
    not have unique identifiers.

    In most cases you can ignore policies. Calling an unauthorized method results
    in an error. Policies are mainly used by the Yonote application to render UI
    controls correctly.
  version: 0.1.0
  contact:
    email: hello@yonote.ru
servers:
  - url: "https://app.yonote.ru/api"
    description: Production
security:
  - http: []
tags:
  - name: Attachments
    description: |
      `Attachments` represent a file uploaded to cloud storage. They are created 
      before the upload happens from the client and store all the meta information
      such as file type, size, and location.
  - name: Auth
    description: |
      `Auth` represents the current API Keys authentication details. It can be 
      used to check that a token is still valid and load the IDs for the current
      user and team.
  - name: Collections
    description: |
      `Collections` represent grouping of documents in the knowledge base, they 
      offer a way to structure information in a nested hierarchy and a level
      at which read and write permissions can be granted to individual users or
      groups of users.
  - name: Comments
    description: |
      `Comments` represents a comment on the document left by users.
  - name: Documents
    description: |
      `Documents` are what everything else revolves around. A document represents
      a single page of information and always returns the latest version of the
      content. Documents are stored in [Markdown](https://spec.commonmark.org/)
      formatting.
  - name: Subscriptions
    description: |
      `Subscriptions` Subscribing to Document Events
  - name: Database
    description: |
      `Databases` are different representations of user data, stored in the Documents entity
  - name: Events
    description: |
      `Events` represent an artifact of an action. Whether it is creating a user,
      editing a document, changing permissions, or any other action – an event
      is created that can be used as an audit trail or activity stream.
  - name: FileOperations
    description: |
      `FileOperations` represent background jobs for importing or exporting files.
      You can query the file operation to find the state of progress and any
      resulting output.
  - name: Groups
    description: |
      `Groups` represent a list of users that logically belong together, for 
      example there might be groups for each department in your organization.
      Groups can be granted access to collections with read or write permissions.
  - name: Integrations
  - name: LDAP
    description: |
      `LDAP` authentication provider, allows you to transfer all users
  - name: Providers
    description: |
      `Providers` Managing custom providers
  - name: Revisions
    description: |
      `Revisions` represent a snapshop of a document at a point in time. They 
      are used to keep tracking of editing and collaboration history – a document
      can also be restored to a previous revision if neccessary.
  - name: Shares
    description: |
      `Shares` represent authorization to view a document without being a member
      of the team. Shares are created in order to give access to documents publicly.
      Each user that shares a document will have a unique share object.
  - name: Sync Blocks
    description: |
      `Sync Blocks` represent a block of text, synchronized between different documents.
  - name: Users
    description: |
      `Users` represent an individual with access to the knowledge base. Users
      are created automatically when signing in with SSO or when a user is
      invited via guest access.
  - name: Views
    description: |
      `Views` represent a compressed record of an individual users views of a
      document. Individual views are not recorded but a first, last and total 
      is kept per user.
paths:
  /attachments.list:
    post:
      tags:
        - Attachments
      summary: List attachments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AttachmentInfo"
                  count:
                    type: number
                    example: 1
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /attachments.size:
    post:
      tags:
        - Attachments
      summary: Get attachments size.
      description: Returns sum of attachments size in your team.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    type: number
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /attachments.create:
    post:
      tags:
        - Attachments
      summary: Create an attachment
      description: Creating an attachment object creates a database record and returns the inputs needed to generate a signed url and upload the file from the client to cloud storage.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: image.png
                documentId:
                  type: string
                  description: "Identifier for the associated document, if any."
                  format: uuid
                contentType:
                  type: string
                  example: image/png
                size:
                  type: number
                  description: Size of the file attachment in bytes.
              required:
                - name
                - contentType
                - size
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      maxUploadSize:
                        type: number
                      uploadUrl:
                        type: string
                        format: uri
                      form:
                        type: object
                      attachment:
                        $ref: "#/components/schemas/Attachment"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /attachments.redirect:
    post:
      tags:
        - Attachments
      summary: Retrieve an attachment
      description: "Load an attachment from where it is stored based on the id. If the attachment is private then a temporary, signed url with embedded credentials is generated on demand."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the attachment.
                  format: uuid
              required:
                - id
      responses:
        "302":
          description: The url for the attachment
  /attachments.delete:
    post:
      tags:
        - Attachments
      summary: Delete an attachment
      description: Deleting an attachment is permanant. It will not delete references or links to the attachment that may exist in your documents.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Unique identifier for the attachment.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /auth.info:
    post:
      tags:
        - Auth
      summary: Retrieve auth
      description: Retrieve authentication details for the current API key
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Auth"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /auth.config:
    post:
      tags:
        - Auth
      summary: Retrieve auth config
      description: Retrieve authentication options
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: MyTeam
                      hostname:
                        type: string
                        example: mydomain.yonote.ru
                      providers:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: slack
                            name:
                              type: string
                              example: Slack
                            authUrl:
                              type: string
                              example: "https://mydomain.yonote.ru/auth/slack"
                            teamDomain:
                              type: string
  /ldap.ping:
    post:
      tags:
        - LDAP
      summary: Retrieve ldap
      description: Connection test
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                certificate:
                  type: string
                  example: user/certificate.pem
                  description: Certificate file (start/tls).
                  format: binary
                base:
                  type: string
                  example: dc=example,dc=org
                  description: Base DN.
                user:
                  type: string
                  example: cn=admin,dc=example,dc=org
                  description: User DN.
                password:
                  type: string
                  description: User password.
                filter:
                  type: string
                  example: (objectClass=inetOrgPerson)
                  description: User search filter.
                hostName:
                  type: string
                  example: example.com
                  description: LDAP host.
                port:
                  type: string
                  example: 35353
                  description: LDAP port.
                ssl:
                  type: boolean
                  example: false
                  description: LEnable ldaps:// protocol
              required:
                - id
                - base
                - user
                - password
                - filter
                - hostName
                - port
                - ssl
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      connection:
                        type: boolean
                      adminAuth:
                        type: boolean
                      userCount:
                        type: boolean
                  status:
                    type: number
                    example: 200
                  ok:
                    type: boolean

        "401":
          $ref: "#/components/responses/Unauthenticated"
  /ldap.create:
    post:
      tags:
        - LDAP
      summary: Retrieve ldap
      description: Create an LDAP provider
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                certificate:
                  type: string
                  example: user/certificate.pem
                  description: Certificate file (start/tls).
                  format: binary
                base:
                  type: string
                  example: dc=example,dc=org
                  description: Base DN.
                user:
                  type: string
                  example: cn=admin,dc=example,dc=org
                  description: User DN.
                password:
                  type: string
                  description: User password.
                customButtonName:
                  type: string
                  description: Custom login button name.
                filter:
                  type: string
                  example: (objectClass=inetOrgPerson)
                  description: User search filter.
                hostName:
                  type: string
                  example: example.com
                  description: LDAP host.
                port:
                  type: string
                  example: 35353
                  description: LDAP port.
                ssl:
                  type: boolean
                  example: false
                  description: LEnable ldaps:// protocol
              required:
                - id
                - base
                - user
                - password
                - filter
                - hostName
                - port
                - ssl
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      providerId:
                        type: string
                        format: uuid
                  status:
                    type: number
                    example: 200
                  ok:
                    type: boolean
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /ldap.login:
    post:
      tags:
        - LDAP
      summary: Retrieve ldap
      description: login via LDAP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                providerId:
                  type: string
                  format: uuid
              required:
                - email
                - password
                - providerId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /provider.enable:
    post:
      tags:
        - Providers
      summary: Disable providers
      description: Disable and enable providers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  type: boolean
                type:
                  type: string
                  description: Provider type.
                  example: "LDAP"
              required:
                - isActive
                - type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  providerId:
                    type: string
                    format: uuid
                  status:
                    type: number
                    example: 200
                  ok:
                    type: string
                    example: "ok"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /provider.delete:
    post:
      tags:
        - Providers
      summary: Delete provaders
      description: Delete provaders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Provider type.
                  example: "LDAP"
              required:
                - type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  providerId:
                    type: string
                    format: uuid
                  status:
                    type: number
                    example: 200
                  ok:
                    type: string
                    example: "ok"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /provider.info:
    post:
      tags:
        - Providers
      summary: Returns a list of active providers
      description: Returns a list of active providers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  providerId:
                    type: string
                    format: uuid
                  status:
                    type: number
                    example: 200
                  ok:
                    type: string
                    example: "ok"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.info:
    post:
      tags:
        - Collections
      summary: Retrieve a collection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the collection.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Collection"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.list:
    post:
      tags:
        - Collections
      summary: List all collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pagination"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Collection"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /collections.create:
    post:
      tags:
        - Collections
      summary: Create a collection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Human Resources
                description:
                  type: string
                  example: ""
                color:
                  type: string
                  example: "#123123"
                private:
                  type: boolean
                  example: false
              required:
                - name
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Collection"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /collections.update:
    post:
      tags:
        - Collections
      summary: Update a collection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                  example: Human Resources
                description:
                  type: string
                  example: ""
                color:
                  type: string
                  example: "#123123"
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Collection"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.add_user:
    post:
      tags:
        - Collections
      summary: Add a collection user
      description: This method allows you to add a user membership to the specified collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                userId:
                  type: string
                  format: uuid
              required:
                - id
                - userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      memberships:
                        type: array
                        items:
                          $ref: "#/components/schemas/Membership"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.remove_user:
    post:
      tags:
        - Collections
      summary: Remove a collection user
      description: This method allows you to remove a user from the specified collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Identifier for the collection
                  format: uuid
                userId:
                  type: string
                  format: uuid
              required:
                - id
                - userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.memberships:
    post:
      tags:
        - Collections
      summary: List all collection memberships
      description: This method allows you to list a collections individual memberships. It's important to note that memberships returned from this endpoint do not include group memberships.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    id:
                      type: string
                      description: Identifier for the collection
                      format: uuid
                    query:
                      type: string
                      description: Filter memberships by user names
                      example: jenny
                    permission:
                      type: string
                      description: Filter memberships by permissions
                      enum:
                        - read
                        - read_write
                        - maintainer
                  required:
                    - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      memberships:
                        type: array
                        items:
                          $ref: "#/components/schemas/Membership"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /collections.add_group:
    post:
      tags:
        - Collections
      summary: Add a group to a collection
      description: This method allows you to give all members in a group access to a collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                groupId:
                  type: string
                  format: uuid
              required:
                - id
                - groupId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      collectionGroupMemberships:
                        type: array
                        items:
                          $ref: "#/components/schemas/CollectionGroupMembership"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.remove_group:
    post:
      tags:
        - Collections
      summary: Remove a collection group
      description: This method allows you to revoke all members in a group access to a collection. Note that members of the group may still retain access through other groups or individual memberships.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Identifier for the collection
                  format: uuid
                groupId:
                  type: string
                  format: uuid
              required:
                - id
                - groupId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.group_memberships:
    post:
      tags:
        - Collections
      summary: List all collection group members
      description: This method allows you to list a collections group memberships. This is the list of groups that have been given access to the collection.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    id:
                      type: string
                      description: Identifier for the collection
                      format: uuid
                    query:
                      type: string
                      description: Filter memberships by group names
                      example: developers
                    permission:
                      type: string
                      description: Filter memberships by permissions
                      enum:
                        - read
                        - read_write
                        - maintainer
                  required:
                    - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      groups:
                        type: array
                        items:
                          $ref: "#/components/schemas/Group"
                      collectionGroupMemberships:
                        type: array
                        items:
                          $ref: "#/components/schemas/CollectionGroupMembership"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /collections.delete:
    post:
      tags:
        - Collections
      summary: Delete a collection
      description: Delete a collection and all of its documents. This action can’t be undone so please be careful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.export:
    post:
      tags:
        - Collections
      summary: Export a collection
      description:
        Triggers a bulk export of the collection in markdown format and their attachments. If documents are nested then they will be nested in folders inside the zip file. The endpoint returns a `FileOperation`
        that can be queried to track the progress of the export and get the url for the final file.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fileOperation:
                        $ref: "#/components/schemas/FileOperation"

        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /collections.export_all:
    post:
      tags:
        - Collections
      summary: Export all collections
      description:
        Triggers a bulk export of all documents in markdown format and their attachments. If documents are nested then they will be nested in folders inside the zip file. The endpoint returns a `FileOperation`
        that can be queried to track the progress of the export and get the url for the final file.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fileOperation:
                        $ref: "#/components/schemas/FileOperation"

        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.create:
    post:
      tags:
        - Comments
      summary: Create a comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                entityType:
                  type: string
                  enum: [document]
                  description: Type of entity for which the comment will be created.
                  example: document
                entityId:
                  type: string
                  description: Unique identifier of entity for which the comment will be created.
                  format: uuid
                text:
                  type: string
                  description: The content of the comment.
                parentCommentId:
                  type: string
                  description: Unique identifier of comment to reply.
                  format: uuid
              required:
                - entityType
                - entityId
                - text
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.update:
    post:
      tags:
        - Comments
      summary: Update a comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for comment to be updated.
                  format: uuid
                text:
                  type: string
                  description: The new content of the comment.
              required:
                - id
                - text
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.delete:
    post:
      tags:
        - Comments
      summary: Delete a comment. If target is a root comment, it also deletes all thread comments.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for comment to be deleted.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.list:
    post:
      tags:
        - Comments
      summary: |
        Retrieve comments. `id` or `shareId` must be provided
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    entityType:
                      type: string
                      enum: [document]
                      description: Type of entity for which comments will be searched.
                      example: document
                    entityId:
                      type: string
                      description: Unique identifier of entity for which comments will be searched.
                      format: uuid
                    shareId:
                      type: string
                      description: Unique identifier of share for which comments will be searched.
                      format: uuid
                    threadId:
                      type: string
                      description: Unique identifier of thread for which comments will be searched. If not defined, returns all comments. If null, returns root comments. If defined, returns comments from thread.
                      format: uuid
                    isResolved:
                      type: boolean
                      description: Filter parameter for comments loader. If `true`, returns only resolved comments. If `false`, returns only unresolved comments. If `undefined`, returns all comments.
                    paranoid:
                      type: boolean
                      default: false
                      description: Filter parameter for comments loader. If `true`, returns only non-deleted comments. If `false`, returns all comments.
              required:
                - entityType
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  count:
                    type: number
                    description: Total count of comments which satisfies query.
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.resolve:
    post:
      tags:
        - Comments
      summary: Resolve/unresolve a comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Unique identifier for the comment to be resolved/unresolved. Only root comments allowed.
                isResolved:
                  type: boolean
                  description: If `true`, marks comment as resolved. If `false`, marks comment as unresolved.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.info:
    post:
      tags:
        - Comments
      summary: Retrieve a single comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Unique identifier for the comment.
                paranoid:
                  type: boolean
                  default: true
                  description: Filter parameter for comments loader. If `true`, returns only non-deleted comments. If `false`, returns all comments.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                   $ref: "#/components/schemas/Comment"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /comments.thread:
    post:
      tags:
        - Comments
      summary: Retrieve a root comment with all its thread comments
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique identifier for the comment.
                    paranoid:
                      type: boolean
                      default: false
                      description: Filter parameter for comments loader. If `true`, returns only non-deleted comments. If `false`, returns all comments.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    allOf:
                     - $ref: "#/components/schemas/Comment"
                     - description: Model of the root comment.
                  thread:
                    type: array
                    description: Paginated list of thread comments.
                    items:
                      $ref: "#/components/schemas/Comment"
                  count:
                    type: number
                    description: Total count of thread comments.
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.info:
    post:
      tags:
        - Documents
      summary: Retrieve a document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
                shareId:
                  type: string
                  format: uuid
                  description: "Unique identifier for a document share, a shareId may be used in place of a document UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.import:
    post:
      tags:
        - Documents
      summary: Import a file as a document
      description: This method allows you to create a new document by importing an existing file. By default a document is set to the collection root. If you want to create a nested/child document, you should pass parentDocumentId to set the parent document.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: object
                  description: Only plain text, markdown, docx, and html format are supported.
                collectionId:
                  type: string
                  format: uuid
                parentDocumentId:
                  type: string
                  format: uuid
                template:
                  type: boolean
                publish:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.export:
    post:
      tags:
        - Documents
      summary: Export a document as markdown
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
                shareId:
                  type: string
                  format: uuid
                  description: "Unique identifier for a document share, a shareId may be used in place of a document UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: The document content in Markdown formatting
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.list:
    post:
      tags:
        - Documents
      summary: List all documents
      description: This method will list all published documents and draft documents belonging to the current user.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
                - type: object
                  properties:
                    collectionId:
                      type: string
                      format: uuid
                      description: Optionally filter to a specific collection
                    userId:
                      type: string
                      format: uuid
                    backlinkDocumentId:
                      type: string
                      format: uuid
                    parentDocumentId:
                      type: string
                      format: uuid
                    template:
                      type: boolean
                      description: Optionally filter to only templates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.drafts:
    post:
      tags:
        - Documents
      summary: List all draft documents
      description: This method will list all draft documents belonging to the current user.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
                - type: object
                  properties:
                    collectionId:
                      type: string
                      description: A collection to search within
                      format: uuid
                    dateFilter:
                      type: string
                      description: Any documents that have not been updated within the specified period will be filtered out
                      example: month
                      enum:
                        - day
                        - week
                        - month
                        - year
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.viewed:
    post:
      tags:
        - Documents
      summary: List all recently viewed documents
      description: This method will list all documents recently viewed by the current user.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.starred:
    post:
      tags:
        - Documents
      summary: List all starred documents
      description: This method will list all documents starred by the current user.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.pinned:
    post:
      tags:
        - Documents
      summary: List all pinned documents
      description: This method will list all documents pinned in a collection.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
                - type: object
                  properties:
                    collectionId:
                      type: string
                      format: uuid
                  required:
                    - collectionId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.search_titles:
    post:
      tags:
        - Documents
      summary: Search documents by titles
      description: This methods allows you to search your teams documents with keywords by titles. Note that search results will be restricted to those accessible by the current access token.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    query:
                      type: string
                      example: hiring
                    isPublished:
                      type: boolean
                      description: If true, returns only published documents. If false, returns only unpublished documents. If unset, returns all documents.
                      example: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.search:
    post:
      tags:
        - Documents
      summary: Search all documents
      description: This methods allows you to search your teams documents with keywords. Note that search results will be restricted to those accessible by the current access token.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    query:
                      type: string
                      example: hiring
                    userId:
                      type: string
                      description: Any documents that have not been edited by the user identifier will be filtered out
                      format: uuid
                    collectionId:
                      type: string
                      description: A collection to search within
                      format: uuid
                    includeArchived:
                      type: boolean
                    includeDrafts:
                      type: boolean
                    dateFilter:
                      type: string
                      description: Any documents that have not been updated within the specified period will be filtered out
                      example: month
                      enum:
                        - day
                        - week
                        - month
                        - year
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        context:
                          type: string
                          description: A short snippet of context from the document that includes the search query.
                          example: At Acme Inc our hiring practices are inclusive
                        ranking:
                          type: number
                          description: The ranking used to order search results based on relevance.
                          format: float
                          example: 1.1844109
                        document:
                          $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.create:
    post:
      tags:
        - Documents
      summary: Create a document
      description: "This method allows you to create or publish a new document. By default a document is set to the collection root. If you want to create a nested/child document, you should pass parentDocumentId to set the parent document."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Welcome to Acme Inc
                text:
                  type: string
                  description: "The body of the document, may contain markdown formatting."
                  example: …
                collectionId:
                  type: string
                  format: uuid
                parentDocumentId:
                  type: string
                  format: uuid
                templateId:
                  type: string
                  format: uuid
                template:
                  type: boolean
                  description: Whether this document should be considered to be a template.
                publish:
                  type: boolean
                  description: Whether this document should be immediately published and made visible to other team members.
              required:
                - title
                - collectionId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.update:
    post:
      tags:
        - Documents
      summary: Update a document
      description: This method allows you to modify an already created document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
                title:
                  type: string
                  description: The title of the document.
                text:
                  type: string
                  description: "The body of the document, may contain markdown formatting."
                  example: …
                append:
                  type: boolean
                  description: "If true the text field will be appended to the end of the existing document, rather than the default behavior of replacing it. This is potentially useful for things like logging into a document."
                publish:
                  type: boolean
                  description: "Whether this document should be published and made visible to other team members, if a draft"
                done:
                  type: boolean
                  description: "Whether the editing session has finished, this will trigger any notifications. This property will soon be deprecated."
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.templatize:
    post:
      tags:
        - Documents
      summary: Create a template from a document
      description: "This method allows you to createa new template using an existing document as the basis"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /documents.star:
    post:
      tags:
        - Documents
      summary: Star a document
      description: Starring a document gives it extra priority in the UI and makes it easier to find important information later.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.unstar:
    post:
      tags:
        - Documents
      summary: Unstar a document
      description: Starring a document gives it extra priority in the UI and makes it easier to find important information later.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.pin:
    post:
      tags:
        - Documents
      summary: Pin a document
      description: Pinning a document highlights it on the collection page for everyone on the team.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.unpin:
    post:
      tags:
        - Documents
      summary: Unpin a document
      description: Pinning a document highlights it on the collection page for everyone on the team.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.unpublish:
    post:
      tags:
        - Documents
      summary: Unpublish a document
      description: Unpublishing a document moves it back to a draft status and out of the collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.move:
    post:
      tags:
        - Documents
      summary: Move a document
      description: "Move a document to a new location or collection. If no parent document is provided, the document will be moved to the collection root."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
                collectionId:
                  type: string
                  format: uuid
                parentDocumentId:
                  type: string
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      documents:
                        type: array
                        items:
                          $ref: "#/components/schemas/Document"
                      collections:
                        type: array
                        items:
                          $ref: "#/components/schemas/Collection"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.archive:
    post:
      tags:
        - Documents
      summary: Archive a document
      description: Archiving a document allows outdated information to be moved out of sight whilst retaining the ability to optionally search and restore it later.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.restore:
    post:
      tags:
        - Documents
      summary: Restore a document
      description: "If a document has been archived or deleted, it can be restored. Optionally a revision can be passed to restore the document to a previous point in time."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
                revisionId:
                  type: string
                  format: uuid
                  description: Identifier for the revision to restore to.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.delete:
    post:
      tags:
        - Documents
      summary: Delete a document
      description: Deleting a document moves it to the trash. If not restored within 30 days it is permenantly deleted.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: hDYep1TPAM
                  description: Unique identifier for the document. Either the UUID or the urlId is acceptable.
                permanent:
                  type: boolean
                  example: false
                  description: If set to true the document will be destroyed with no way to recover rather than moved to the trash.
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /documents.copy:
    post:
      tags:
        - Documents
      summary: Copy a document
      description: Copy a public document to a target collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                targetCollectionId:
                  type: string
                  example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  description: Target collection id. Either the UUID or the urlId is acceptable.
                shareId:
                  type: string
                  example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  description: Unique identifier for the share.
                  format: uuid
              required:
                - targetCollectionId
                - shareId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /subscriptions.create:
    post:
      tags:
        - Subscriptions
      summary: Create subscription
      description: Creates a subscription to a document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId:
                  type: string
                  example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                event:
                  type: string
                  enum: [document.update]
                  description: Selecting an event subscription
              required:
                - documentId
                - event
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                      userId:
                        type: string
                        example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                      documentId:
                        type: string
                        example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                      event:
                        type: string
                        example: documents.update
                      createdAt:
                        type: string
                        example: 2022-11-29T10:25:33.175Z
                      updatedAt:
                        type: string
                        example: 2022-11-29T10:25:33.175Z
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /subscriptions.info:
    post:
      tags:
        - Subscriptions
      summary: Subscriptions info
      description: Get subscription information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId:
                  type: string
                  example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                event:
                  type: string
                  enum: [document.update]
                  description: Selecting an event subscription
              required:
                - documentId
                - event
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                      userId:
                        type: string
                        example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                      documentId:
                        type: string
                        example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
                      event:
                        type: string
                        example: documents.update
                      createdAt:
                        type: string
                        example: 2022-11-29T10:25:33.175Z
                      updatedAt:
                        type: string
                        example: 2022-11-29T10:25:33.175Z
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /subscriptions.delete:
    post:
      tags:
        - Subscriptions
      summary: Subscriptions delete
      description: Delete a subscription to a document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 1fb7fa75-c85c-4fa1-8393-d88676c2c0e8
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: number
                    example: 200
                  ok:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /syncBlocks.create:
    post:
      tags:
        - Sync Blocks
      summary: Create a sync block.
      description: Create one or many sync blocks for a document.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                documentId:
                  type: string
                  format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SyncBlock"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /syncBlocks.delete:
    post:
      tags:
        - Sync Blocks
      summary: Delete a sync block.
      description: Delete one or many sync blocks from a document.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                documentId:
                  type: string
                  format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SyncBlockDeleteResponse"
        "400":
          $ref: "#/components/responses/Validation"
        "404":
          $ref: "#/components/responses/NotFound"
  /syncBlocks.list:
    post:
      tags:
        - Sync Blocks
      summary: Retrieve a list of sync blocks in document
      description: Get a list of sync blocks that are inserted in selected document.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId:
                  type: string
                  format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SyncBlock"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /syncBlocks.list_inserts:
    post:
      tags:
        - Sync Blocks
      summary: Retrieve a list of documents where selected sync block was inserted.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                syncBlockId:
                  type: string
                  format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DocumentSyncBlock"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /database.rows.list:
    post:
      tags:
        - Database
      summary: Get database rows,
      description: Get database rows, sorting, and filtering database rows.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: Required parameter for filtering.
                  type: array
                  items:
                    properties:
                      filterValue:
                        oneOf:
                          - type: string
                            example: 24
                            description: Search value (for example, part of a word).
                          - type: array
                            items:
                              type: string
                              example: [24, 38]
                              description: Search range between.
                      filterOperation:
                        type: string
                        enum: [IsEquals, IsNotEqual, StartsWith, EndsWith, Contains, NotContains, IsNotNull, IsNull, Greater, Less, Between]
                        description: Comparison operator.
                      filterPropertyId:
                        type: string
                        example: 08da298e-4fd6-46ef-b08a-5922756fe2d2
                        description: Id of the column to filter by
                propertyType:
                  type: string
                  example: number
                  description: Optional parameter, if the filtered column uses a data type, then you must pass "numder" for correct sorting (Required parameter for filtering)
                parentDocumentId:
                  type: string
                  example: bc977f42-103d-4461-8a79-6997a7764a4a
                  description: Parent document id with database type
                orderBy:
                  type: string
                  example: bc977f42-103d-4461-8a79-6997a7764a4a
                  description: Id of the column to sort by
                direction:
                  type: string
                  enum: [ASC, DESC]
              required:
                - parentDocumentId
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Document"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /events.list:
    post:
      tags:
        - Events
      summary: List all events
      description: Events are an audit trail of important events that happen in the knowledge base.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
                - type: object
                  properties:
                    name:
                      type: string
                      description: Filter to a specific event, e.g. "collections.create". Event names are in the format "objects.verb"
                    actorId:
                      type: string
                      format: uuid
                      description: Filter to events performed by the selected user
                    documentId:
                      type: string
                      format: uuid
                      description: Filter to events performed in the selected document
                    collectionId:
                      type: string
                      format: uuid
                      description: Filter to events performed in the selected collection
                    auditLog:
                      type: boolean
                      description: Whether to return detailed events suitable for an audit log. Without this flag less detailed event types will be returned.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /fileOperations.info:
    post:
      tags:
        - FileOperations
      summary: Retrieve a file operation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the file operation.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/FileOperation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /fileOperations.redirect:
    post:
      tags:
        - FileOperations
      summary: Retrieve the file
      description: Load the resulting file from where it is stored based on the id. A temporary, signed url with embedded credentials is generated on demand.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the file operation.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /fileOperations.list:
    post:
      tags:
        - FileOperations
      summary: List all file operations
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
                - type: object
                  properties:
                    type:
                      type: string
                      description: The type of fileOperation
                      example: export
                      enum:
                        - export
                        - import
                  required:
                    - type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileOperation"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /groups.info:
    post:
      tags:
        - Groups
      summary: Retrieve a group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the group.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Group"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /groups.list:
    post:
      tags:
        - Groups
      summary: List all groups
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /groups.create:
    post:
      tags:
        - Groups
      summary: Create a group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Designers
              required:
                - name
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Group"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /groups.update:
    post:
      tags:
        - Groups
      summary: Update a group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                  example: Designers
              required:
                - id
                - name
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Group"
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /groups.delete:
    post:
      tags:
        - Groups
      summary: Delete a group
      description: Deleting a group will cause all of its members to lose access to any collections the group has previously been added to. This action can’t be undone so please be careful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /groups.memberships:
    post:
      tags:
        - Groups
      summary: List all group members
      description: List and filter all the members in a group.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    query:
                      type: string
                      description: Filter memberships by user names
                      example: jenny
                  required:
                    - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      groupMemberships:
                        type: array
                        items:
                          $ref: "#/components/schemas/GroupMembership"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /groups.add_user:
    post:
      tags:
        - Groups
      summary: Add a group member
      description: This method allows you to add a user to the specified group.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                userId:
                  type: string
                  format: uuid
              required:
                - id
                - userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      groups:
                        type: array
                        items:
                          $ref: "#/components/schemas/Group"
                      groupMemberships:
                        type: array
                        items:
                          $ref: "#/components/schemas/Membership"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /groups.remove_user:
    post:
      tags:
        - Groups
      summary: Remove a group member
      description: This method allows you to remove a user from the group.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Identifier for the collection
                  format: uuid
                userId:
                  type: string
                  format: uuid
              required:
                - id
                - userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      groups:
                        type: array
                        items:
                          $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /loop.teams:
    post:
      tags:
        - Integrations
      summary: Retrieve Loop teams
      description: This method allows you to get list of teams from connected Loop namespace
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/LoopTeam"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /loop.channels:
    post:
      tags:
        - Integrations
      summary: Retrieve Loop channels
      description: This method allows you to get list of channels from connected Loop namespace
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoopChannel'
  /loop.commands:
    post:
      tags:
        - Integrations
      summary: Install slash command integration on Loop team
      description: This method allows you to create command integration for specified team in connected Loop namespace
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: string
                  description: Unique identifier of Loop team
              required:
                - team_id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  integration:
                    $ref: '#/components/schemas/Integration'
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /loop.post:
    post:
      tags:
        - Integrations
      summary: Install post integration on Loop channel
      description: This method allows you to create post integration for specified team in connected Loop namespace
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  description: Unique identifier of Yonote collection
                  format: uuid
                channel:
                  type: string
                  description: Unique identifier of Loop channel
              required:
                - collectionId
                - channel
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  integration:
                    $ref: '#/components/schemas/Integration'
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /telegram.commands:
    post:
      tags:
        - Integrations
      summary: Install commands integration on Telegram private or group chat
      description: "This method allows you to connect command integration to the Telegram chat. After a successful request you will be redirected to Telegram bot, where you can select group chat if 'group` parameter was set to 'true' and connect integration. After connection is done, '/publish <keyword>' command will be available in Telegram chat to search and publish Yonote documents."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group:
                  type: boolean
                  description: "If 'true', integration will be connected to group chat, otherwise it will be connected to private chat"
      responses:
        "302":
          description: FOUND
          headers:
            Location:
              schema:
                type: string
                description: An URL to Telegram bot which is used to perform integration actions.
                example: "https://telegram.me/YonoteBot?start=123e4567-e89b-12d3-a456-426655440000"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /telegram.post:
    post:
      tags:
        - Integrations
      summary: Install post integration on Telegram group chat
      description: "This method allows you to connect post integration to the Telegram group chat. After a successful request you will be redirected to Telegram bot, whre you can select group chat and connect integration for it. After connection is done, published and updated documents will be automatically posted to Telegram chat."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  description: Unique identifier of collection which will be used for post integration.
                  format: uuid
              required:
                - collectionId
      responses:
        "302":
          description: FOUND
          headers:
            Location:
              schema:
                type: string
                description: An URL to Telegram bot which is used to perform integration actions.
                example: "https://telegram.me/YonoteBot?startgroup=123e4567-e89b-12d3-a456-426655440000"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /revisions.info:
    post:
      tags:
        - Revisions
      summary: Retrieve a revision
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the revision.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Revision"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /revisions.list:
    post:
      tags:
        - Revisions
      summary: List all revisions
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Revision"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /shares.info:
    post:
      tags:
        - Shares
      summary: Retrieve a share object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the share.
                  format: uuid
                documentId:
                  type: string
                  description: Unique identifier for a document. One of id or documentId must be provided.
                  format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Share"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /shares.list:
    post:
      tags:
        - Shares
      summary: List all shares
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Share"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /shares.create:
    post:
      tags:
        - Shares
      summary: Create a share
      description: Creates a new share link that can be used by to access a document. If you request multiple shares for the same the ocument with the same API key the same share object will be returned. By default all shares are unpublished.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId:
                  type: string
                  format: uuid
              required:
                - documentId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Share"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /shares.update:
    post:
      tags:
        - Shares
      summary: Update a share
      description: Allows changing an existing shares published status, which removes authentication and makes it available to anyone with the link.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                published:
                  type: boolean
                  description: If true, the share can be loaded without a user account.
                includeChildDocuments:
                  type: boolean
                  description: If true, also give permission to view documents nested beneath this one.
                exposesAt:
                  oneOf:
                    - type: number
                    - type: string
                  description: Timestamp with milliseconds or valid JSDate string. Date and time from which the document will be available for viewing
                  nullable: true
                expiresAt:
                  oneOf:
                    - type: number
                    - type: string
                  description: Timestamp with milliseconds or valid JSDate string. Date and time from which the document will be not available for viewing
                  nullable: true
                link:
                  type: string
                  description: Custom link identifier for share. Should be unique per team.
                  nullable: true
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Share"
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /shares.revoke:
    post:
      tags:
        - Shares
      summary: Revoke a share
      description: Makes the share link inactive so that it can no longer be used to access the document.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/Validation"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.info:
    post:
      tags:
        - Users
      summary: Retrieve a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the user.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.list:
    post:
      tags:
        - Users
      summary: List all users
      description: List and filter all the users in the team
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - $ref: "#/components/schemas/Sorting"
                - type: object
                  properties:
                    query:
                      type: string
                      example: jane
                    filter:
                      type: string
                      example: "all"
                      enum:
                        - invited
                        - viewers
                        - admins
                        - active
                        - all
                        - suspended
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /users.update:
    post:
      tags:
        - Users
      summary: Update a user
      description: Update a users name or avatar. No `id` is required as it is only possible to update the current user at this time.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatarUrl:
                  type: string
                  format: uri
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.promote:
    post:
      tags:
        - Users
      summary: Promote a user
      description: Promote a user to be a team admin. This endpoint is only available for admin users.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the user.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.demote:
    post:
      tags:
        - Users
      summary: Demote a user
      description: Demote a team admin to regular user permissions. This endpoint is only available for admin users.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the user.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.suspend:
    post:
      tags:
        - Users
      summary: Suspend a user
      description: Suspending a user prevents the user from signing in. Users that are suspended are also not counted against billing totals in the hosted version.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the user.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.activate:
    post:
      tags:
        - Users
      summary: Activate a user
      description: Activating a previously suspended user allows them to signin again. Users that are activated will cause billing totals to be re-calculated in the hosted version.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the user.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users.delete:
    post:
      tags:
        - Users
      summary: Delete a user
      description: "Deleting a user removes the object entirely. In almost every circumstance it is preferable to suspend a user, as a deleted user can be recreated by signing in with SSO again."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier for the user.
                  format: uuid
              required:
                - id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /views.list:
    post:
      tags:
        - Views
      summary: List all views
      description: List all users that have viewed a document and the overall view count.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId:
                  type: string
                  format: uuid
              required:
                - documentId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/View"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /views.create:
    post:
      tags:
        - Views
      summary: Create a view
      description: Creates a new view for a document. This is documented in the interests of thoroughness however it is recommended that views are not created from outside of the Yonote UI.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId:
                  type: string
                  format: uuid
              required:
                - documentId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/View"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
components:
  schemas:
    AttachmentInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        contentType:
          type: string
          example: image/png
        key:
          type: string
          example: key/to/file.png
        url:
          type: string
          format: uri
        size:
          type: number
        acl:
          type: string
          enum: [public, private]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Attachment:
      type: object
      properties:
        contentType:
          type: string
          example: image/png
        size:
          type: number
        name:
          type: string
        url:
          type: string
          format: uri
        documentId:
          type: string
          description: "Identifier for the associated document, if any."
          format: uuid
    Pagination:
      type: object
      properties:
        offset:
          type: number
        limit:
          type: number
          example: 25
    Sorting:
      type: object
      properties:
        sort:
          type: string
          example: updatedAt
        direction:
          type: string
          example: DESC
          enum:
            - ASC
            - DESC
    NavigationNode:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the document.
          format: uuid
        title:
          type: string
        url:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/NavigationNode"
    Auth:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        team:
          $ref: "#/components/schemas/Team"
    Collection:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        name:
          type: string
          description: The name of the collection.
          example: Human Resources
        description:
          type: string
          description: "A description of the collection, may contain markdown formatting"
          example: ""
        documents:
          type: array
          items:
            $ref: "#/components/schemas/NavigationNode"
          example: []
        color:
          type: string
          description: "A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #"
          example: "#123123"
        private:
          type: boolean
          description: Whether this collection is considered to be private. Private collections are only visible to those with a user or group membership.
          example: false
        createdAt:
          type: string
          description: The date and time that this object was created
          readOnly: true
          format: date-time
        updatedAt:
          type: string
          description: The date and time that this object was last changed
          readOnly: true
          format: date-time
        deletedAt:
          type: string
          nullable: true
          description: The date and time that this object was deleted
          readOnly: true
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        entityType:
          type: string
          enum: [document]
          description: Entity type on which the comment was left.
        entityId:
          type: string
          description: Unique identifier for entity on which the comment was left.
          format: uuid
        text:
          type: string
          description: Content of a comment.
        isResolved:
          type: boolean
          description: Whether the comment is resolved.
        threadId:
          type: string
          description: Unique identifier for thread on which the comment was left.
          format: uuid
        parentCommentId:
          type: string
          description: Unique identifier of the comment that was replied to
          format: uuid
        teamId:
          type: string
          description: Unique identifier for team where comment was left.
          readOnly: true
          format: uuid
        createdById:
          type: string
          description: Unique identifier for user who created this comment.
          readOnly: true
          format: uuid
    Document:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        collectionId:
          type: string
          description: Identifier for the associated collection.
          format: uuid
        parentDocumentId:
          type: string
          description: "Identifier for the document this is a child of, if any."
          format: uuid
        title:
          type: string
          description: The title of the document.
          example: "\U0001F389 Welcome to Acme Inc"
        emoji:
          type: string
          description: An emoji associated with the document.
          example: "\U0001F389"
          readOnly: true
        text:
          type: string
          description: "The text content of the document, contains markdown formatting"
          example: …
        urlId:
          type: string
          description: A short unique ID that can be used to identify the document as an alternative to the UUID
          example: hDYep1TPAM
        collaborators:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pinned:
          type: boolean
          description: Whether this document is pinned in the collection
        template:
          type: boolean
          description: Whether this document is a template
        templateId:
          type: string
          description: Unique identifier for the template this document was created from, if any
          format: uuid
        starred:
          type: boolean
          description: Whether this document is starred by the current user
        revision:
          type: number
          description: A number that is auto incrementing with every revision of the document that is saved
          readOnly: true
        createdAt:
          type: string
          description: The date and time that this object was created
          readOnly: true
          format: date-time
        createdBy:
          $ref: "#/components/schemas/User"
        updatedAt:
          type: string
          description: The date and time that this object was last changed
          readOnly: true
          format: date-time
        updatedBy:
          $ref: "#/components/schemas/User"
        publishedAt:
          type: string
          nullable: true
          description: The date and time that this object was published
          readOnly: true
          format: date-time
        archivedAt:
          type: string
          description: The date and time that this object was archived
          readOnly: true
          format: date-time
        deletedAt:
          type: string
          nullable: true
          description: The date and time that this object was deleted
          readOnly: true
          format: date-time
    Event:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        name:
          type: string
          example: documents.create
          readOnly: true
        modelId:
          type: string
          description: Identifier for the object this event is associated with when it is not one of document or collection
          format: uuid
          readOnly: true
        actorId:
          type: string
          description: The user that performed the action.
          format: uuid
          readOnly: true
        actorIpAddress:
          type: string
          description: The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.
          example: 60.169.88.100
          readOnly: true
        collectionId:
          type: string
          format: uuid
          description: "Identifier for the associated collection, if any"
          readOnly: true
        documentId:
          type: string
          format: uuid
          description: "Identifier for the associated document, if any"
          readOnly: true
        createdAt:
          type: string
          description: The date and time that this event was created
          readOnly: true
          format: date-time
        data:
          type: object
          example:
            name: Equipment list
          description: Additional unstructured data associated with the event
          readOnly: true
        actor:
          $ref: "#/components/schemas/User"
    Error:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        error:
          type: string
    FileOperation:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        type:
          type: string
          example: "export"
          description: The type of file operation.
          readOnly: true
          enum:
            - import
            - export
        state:
          type: string
          description: The state of the file operation.
          example: "complete"
          readOnly: true
          enum:
            - creating
            - uploading
            - complete
            - error
            - expired
        collection:
          allOf:
            - nullable: true
            - $ref: "#/components/schemas/Collection"
        user:
          $ref: "#/components/schemas/User"
        size:
          type: number
          description: The size of the resulting file in bytes
          readOnly: true
          example: 2048
        createdAt:
          type: string
          description: The date and time that this object was created
          readOnly: true
          format: date-time
    Group:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        name:
          type: string
          description: The name of this group.
          example: Engineering
        memberCount:
          type: number
          description: The number of users that are members of the group
          example: 11
          readOnly: true
        createdAt:
          type: string
          description: The date and time that this object was created
          readOnly: true
          format: date-time
        updatedAt:
          type: string
          description: The date and time that this object was last changed
          readOnly: true
          format: date-time
    Integration:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object
          format: uuid
          readOnly: true
        type:
          type: string
          description: The type of an integration
          readOnly: true
        userId:
          type: string
          description: Unique identifier for the user who created an integration
          readOnly: true
          format: uuid
        teamId:
          type: string
          description: Unique identifier for the Team which uses that integration
          readOnly: true
          format: uuid
        collectionId:
          type: string
          description: Unique identifier for the collection which is connected to integration. Defined only for post integrations
          readOnly: true
          format: uuid
        authenticationId:
          type: string
          description: Unique identifier for the integration authentication which is used for integration
          readOnly: true
          format: uuid
        service:
          type: string
          description: The third-party service name which is connected by integration
          readOnly: true
        events:
          type: array
          items:
            type: string
          description: An array of event types which will be used by integration
          readOnly: true
        settings:
          type: object
          description: The settings of integration
          readOnly: true
        createdAt:
          type: string
          description: The date and time that this object was created
          readOnly: true
          format: date-time
        updatedAt:
          type: string
          description: The date and time that this object was last changed
          readOnly: true
          format: date-time
    LoopChannel:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        create_at:
          type: number
          description: The timestamp that this team was created
          readOnly: true
        update_at:
          type: number
          description: The timestamp that this team was updated
          readOnly: true
        delete_at:
          type: number
          description: The timestamp that this team was deleted
          readOnly: true
        team_id:
          type: string
          description: The unique identifier for Loop team that contains current channel
          readOnly: true
        type:
          type: string
          readOnly: true
        display_name:
          type: string
          description: The name of the channel which is being displayed in application
          readOnly: true
        name:
          type: string
          description: The nameof the channel
          readOnly: true
        header:
          type: string
          description: The header of the channel
          readOnly: true
        purpose:
          type: string
          readOnly: true
        last_post_at:
          type: number
          readOnly: true
        total_msg_count:
          type: number
          description: The number of messages posted in this channel
          readOnly: true
        extra_update_at:
          type: number
          readOnly: true
        creator_id:
          type: string
          readOnly: true
        team_display_name:
          type: string
          description: The name of the team which is being displayed in application
          readOnly: true
        team_name:
          type: string
          description: The name of the team
          readOnly: true
        team_update_at:
          type: number
          readOnly: true
        policy_id:
          type: string
          readOnly: true
    LoopTeam:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        create_at:
          type: number
          description: The timestamp that this team was created
          readOnly: true
        update_at:
          type: number
          description: The timestamp that this team was updated
          readOnly: true
        delete_at:
          type: number
          description: The timestamp that this team was deleted
          readOnly: true
        display_name:
          type: string
          description: The name of the team which is being displayed in application
          readOnly: true
        name:
          type: string
          description: The name of the team
          readOnly: true
        description:
          type: string
          description: The description of the team
          readOnly: true
        email:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        allowed_domains:
          type: string
          readOnly: true
        invite_id:
          type: string
          readOnly: true
        allow_open_invite:
          type: boolean
          readOnly: true
        policy_id:
          type: string
          readOnly: true
    Share:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        documentTitle:
          type: string
          description: Title of the shared document.
          example: React best practices
          readOnly: true
        documentUrl:
          type: string
          format: uri
          description: URL of the original document.
          readOnly: true
        url:
          type: string
          format: uri
          description: URL of the publicly shared document.
          readOnly: true
        published:
          type: boolean
          example: false
          description: If true the share can be loaded without a user account.
        includeChildDocuments:
          type: boolean
          example: true
          description: If true also give permission to view documents nested beneath this one.
        includeComments:
          type: boolean
          example: true
          description: If true also give permission to view document comments
        exposesAt:
          type: string
          format: date-time
          description: Date and time from which the document will be available for viewing
          nullable: true
        expiresAt:
          type: string
          format: date-time
          description: Date and time from which the document will be not available for viewing
          nullable: true
        link:
          type: string
          description: Custom identifier for share. Used to create custom links for shared documents.
          example: "custom-share-link"
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Date and time when this share was created
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/User"
        updatedAt:
          type: string
          format: date-time
          description: Date and time when this share was edited
          readOnly: true
        lastAccessedAt:
          type: string
          format: date-time
          description: Date and time when this share was last viewed
          readOnly: true
    Revision:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        documentId:
          type: string
          description: Identifier for the associated document.
          readOnly: true
          format: uuid
        title:
          type: string
          description: Title of the document.
          readOnly: true
        text:
          type: string
          description: "Body of the document, may contain markdown formatting"
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Date and time when this revision was created
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/User"
    Team:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        name:
          type: string
          description: "The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary."
        avatarUrl:
          type: string
          format: uri
          description: "The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name."
        slackConnected:
          type: boolean
          readOnly: true
          description: Whether this team has authentication with Slack enabled.
        googleConnected:
          type: boolean
          readOnly: true
          description: Whether this team has authentication with Google Workspace enabled.
        sharing:
          type: boolean
          description: Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled.
        documentEmbeds:
          type: boolean
          description: Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties.
        guestSignin:
          type: boolean
          description: Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited.
        subdomain:
          type: string
          description: Represents the subdomain at which this team's knowledge base can be accessed.
        url:
          type: string
          description: The fully qualified URL at which this team's knowledge base can be accessed.
          readOnly: true
          format: uri
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
          format: uuid
        name:
          type: string
          description: "The name of this user, it is migrated from Slack or Google Workspace when the SSO connection is made but can be changed if neccessary."
          example: Jane Doe
        avatarUrl:
          type: string
          format: uri
          description: "The URL for the image associated with this user, it will be displayed in the application UI and email notifications."
        email:
          type: string
          description: "The email associated with this user, it is migrated from Slack or Google Workspace when the SSO connection is made but can be changed if neccessary."
          format: email
        isAdmin:
          type: boolean
          description: Whether this user has admin permissions.
        isSuspended:
          type: boolean
          description: Whether this user has been suspended.
        lastActiveAt:
          type: string
          description: "The last time this user made an API request, this value is updated at most every 5 minutes."
          readOnly: true
          format: date
        createdAt:
          type: string
          description: The date and time that this user first signed in or was invited as a guest.
          readOnly: true
          format: date-time
    Membership:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
        userId:
          type: string
          description: Identifier for the associated user.
          readOnly: true
          format: uuid
        collectionId:
          type: string
          description: Identifier for the associated collection.
          readOnly: true
          format: uuid
        permission:
          type: string
          enum:
            - read
            - read_write
            - maintainer
          description: The permissions that this membership grants the user
          example: read_write
    Policy:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object this policy references.
          format: uuid
          readOnly: true
        abilities:
          type: object
          properties:
            create:
              type: boolean
            read:
              type: boolean
            update:
              type: boolean
            delete:
              type: boolean
            restore:
              type: boolean
            star:
              type: boolean
            unstar:
              type: boolean
            share:
              type: boolean
            download:
              type: boolean
            pin:
              type: boolean
            unpin:
              type: boolean
            move:
              type: boolean
            archive:
              type: boolean
            unarchive:
              type: boolean
            createChildDocument:
              type: boolean
    GroupMembership:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
        groupId:
          type: string
          description: Identifier for the associated group.
          readOnly: true
          format: uuid
        userId:
          type: string
          description: Identifier for the associated user.
          readOnly: true
          format: uuid
        user:
          $ref: "#/components/schemas/User"
    CollectionGroupMembership:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
        groupId:
          type: string
          description: Identifier for the associated group.
          readOnly: true
          format: uuid
        collectionId:
          type: string
          description: Identifier for the associated collection.
          readOnly: true
          format: uuid
        permission:
          type: string
          enum:
            - read
            - read_write
            - maintainer
          description: The permissions that this membership grants the users in the group
          example: read_write
    View:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          readOnly: true
        documentId:
          type: string
          description: Identifier for the associated document.
          readOnly: true
          format: uuid
        firstViewedAt:
          type: string
          description: When the document was first viewed by the user
          readOnly: true
          format: date-time
        lastViewedAt:
          type: string
          description: When the document was last viewed by the user
          readOnly: true
          format: date-time
        count:
          type: number
          description: The number of times the user has viewed the document.
          example: 22
          readOnly: true
        user:
          $ref: "#/components/schemas/User"
    SyncBlock:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        teamId:
          type: string
          format: uuid
        createdById:
          type: string
          format: uuid
        updatedById:
          type: string
          format: uuid
        documentSyncBlocks:
          $ref: '#/components/schemas/DocumentSyncBlock_SyncBlock'
    DocumentSyncBlock_SyncBlock:
      type: object
      properties:
        id:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        isMain:
          type: boolean
    SyncBlockDeleteResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        success:
          type: boolean
        message:
          type: string
    DocumentSyncBlock:
      type: object
      properties:
        id:
          type: string
          format: uuid
        isMain:
          type: boolean
        syncBlockId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        document:
          $ref: "#/components/schemas/Document"
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Validation:
      description: The request failed one or more validations.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: The current API key is not authorized to perform this action.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthenticated:
      description: The API key is missing or otherwise invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    http:
      type: http
      scheme: bearer
      bearerFormat: JWT
